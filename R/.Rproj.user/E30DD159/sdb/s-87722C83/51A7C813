{
    "contents" : "#Run some quick analysis on the teamData.csv dataset\n\nlibrary(\"ggplot2\")\nlibrary(\"doBy\")\nlibrary(\"caret\")\nlibrary('reshape2')\n\nrmse <- function(sim, obj) {\n  error <- sim - obj\n  return(sqrt(mean(error^2)))\n}\n\nteamData <- read.csv(\"../teamData.csv\")\n\n#split the data straight down the middle into traning and test sets\n#the reason we do it this way is because we need to keep games grouped together\n#and this is the easiest way to do that\nprint(\"Splitting into train and test data\")\nteamData.train <- teamData[1:floor(nrow(teamData)/2),]\nteamData.test <- teamData[(floor(nrow(teamData)/2)+1):nrow(teamData),]\n\nvictoryByHighLow <- summaryBy(standing ~ hasHighestScoringPlayer + hasLowestScoringPlayer, \n                              data = teamData, FUN=victoryRate)\n\nhighLowPlot <- ggplot(data=victoryByHighLow, \n       aes(x=factor(hasHighestScoringPlayer, labels=c(\"No\", \"Yes\")),\n           y = standing.victoryRate, \n           fill=factor(hasLowestScoringPlayer, labels=c(\"No\", \"Yes\")))) +\n  ggtitle(\"Victory Rate with Highest and/or Lowest Scoring Players\") +\n  labs(fill=\"Has Lowest Scoring Player\", x=\"Has Highest Scoring Player\") + \n  geom_bar(stat=\"identity\", position=\"dodge\")\nprint(highLowPlot)\n\ngrouped.byFireTeam <- summaryBy(standing ~ numberOfFireTeams, data=teamData, FUN=victoryRate)\nfireteamplot <- ggplot(data=grouped.byFireTeam, \n       aes(x=numberOfFireTeams, y=standing.victoryRate, fill=factor(numberOfFireTeams))) + \n  ggtitle(\"Victory Rate by Number Of Fireteams On Team\") + \n  labs(fill=\"Number Of Fire Teams\", x=\"Number of Fire Teams\") + geom_bar(stat='identity')\nprint(fireteamplot)\n\nteamData$numberOfExoticsCut <- cut(teamData$numberOfExotics, c(-Inf,seq(0,50,2),Inf))\ngrouped.byNumberExotic <- summaryBy(standing ~ numberOfExoticsCut, data=teamData, FUN=victoryRate)\nexoticPlot <- ggplot(data=grouped.byNumberExotic, \n                       aes(x=numberOfExoticsCut, y=standing.victoryRate, fill=factor(numberOfExoticsCut))) + \n  ggtitle(\"Victory Rate by Number Of Exotics used By Team\") + \n  labs(fill=\"Number of Exotics\", x=\"Number of Exotics\") + geom_bar(stat='identity')\nprint(exoticPlot)\n\nteamData$numberOfLegendariesCut <- cut(teamData$numberOfLegendaries, c(-Inf,seq(0,50,2), Inf))\ngrouped.byNumberLegendary <- summaryBy(standing ~ numberOfLegendariesCut, data=teamData, FUN=victoryRate)\nlegendaryPlot <- ggplot(data=grouped.byNumberLegendary, \n                     aes(x=numberOfLegendariesCut, y=standing.victoryRate, fill=factor(numberOfLegendariesCut))) + \n  ggtitle(\"Victory Rate by Number Of Legendaries used By Team\") + \n  labs(fill=\"Number of Legendaries\", x=\"Number of Legendaries\") + geom_bar(stat='identity')\nprint(legendaryPlot)\n\nteamData$heavyWeaponCut <- cut(teamData$weaponKillsHeavy, c(-Inf,seq(0,20,2), Inf))\ngrouped.byHeavy <- summaryBy(standing ~ heavyWeaponCut, data=teamData, FUN=victoryRate)\nheavyPlot <- ggplot(data=grouped.byHeavy, \n                     aes(x=heavyWeaponCut, y=standing.victoryRate, fill=factor(heavyWeaponCut))) + \n  ggtitle(\"Victory Rate by Heavy Weapon Kills\") + \n  labs(fill=\"Number Of Heavy Weapon Kills\", x=\"Number of Heavy Weapon Kills\") + \n  geom_bar(stat='identity')\nprint(heavyPlot)\n\nkillsDeathsRatio <- hist(teamData$killsDeathsRatio)\nteamData$killsDeathsRatioCut <- cut(teamData$killsDeathsRatio, c(-Inf,seq(0,2,.5),Inf))\ngrouped.byKDR <- summaryBy(standing ~ killsDeathsRatioCut, data = teamData, FUN=victoryRate)\n\n#get rid of the first row.  A KDR of 0 has a 100% chance of winning because of wierd reasons\ngrouped.byKDR <- grouped.byKDR[2:nrow(grouped.byKDR), ]\nkdrPlot <- ggplot(data=grouped.byKDR, \n                  aes(x=killsDeathsRatioCut, y=standing.victoryRate,fill=factor(killsDeathsRatioCut))) +\n  ggtitle(\"Victory Rate by Kill Death Ratio\")+\n  labs(fill=\"Kill Death Ratio\", x=\"Kill Death Ratio\") +\n  geom_bar(stat='identity')\nprint(kdrPlot)\n\n#look at secondary as related to map\nsecondaryWeaponBreaks = c(-Inf, seq(0,20,5), Inf)\n\nteamData$weaponKillsFusionRifleCut <- cut(teamData$weaponKillsFusionRifle, secondaryWeaponBreaks)\nteamData$weaponKillsShotgunCut <- cut(teamData$weaponKillsShotgun, secondaryWeaponBreaks)\nteamData$weaponKillsSniperCut <- cut(teamData$weaponKillsSniper, secondaryWeaponBreaks)\n\ngrouped.byMapAndSecondary <- summaryBy(standing ~ refrencedId +\n                                         weaponKillsShotgunCut +\n                                         weaponKillsSniperRifleCut, data=teamData, FUN=victoryRate)\n\n####################\n#Do predictions\nformula <- standing ~ characterLevel + combatRating + killsDeathsRatio + defensiveKills +\n  offensiveKills + objectivesCompleted + killsDeathsAssists + refrencedId + team + \n  hasHighestScoringPlayer + hasLowestScoringPlayer + weaponKillsSuper + numberOfFireTeams +\n  numberOfExotics + numberOfLegendaries + combatRatingStd + weaponKillsHeavy + players\n\n#10 fold CV \nprint(\"Running 10 fold CV\")\nfitControl <- trainControl(method='repeatedcv', \n                           number=10, \n                           repeats=1,\n                           verbose=TRUE)\n\nfit1<-train(formula,\n            data=teamData.train,\n            method='gbm',\n            trControl = fitControl,\n            verbose=FALSE\n)\n\nprint(\"Making predictions\")\npredictions <- predict(fit1, teamData.test, type=\"raw\")\n\ndata.predictions <- data.frame(standing= predictions, id = teamData.test$X, gameId = teamData.test$gameId)\n\nrootMeanError <- rmse(data.predictions$standing, teamData.test$standing)\nprint(rootMeanError)\n\nwrite.csv(data.predictions, \"predictions_raw.csv\", row.names=FALSE)\n\n\n#look at kill ratios per map\n#basically take the total number of kills with one type of weapon versus the total number of kills\n#group them by map and victory and look for trends\n\n#get the total number of kills per map and standing (0 for victory, 1 for defeat)\nkillsPerMap <- summaryBy(kills ~ refrencedId + standing, data= teamData, FUN=sum)\n\n#sniper usage\nsniperUsageByMap <- summaryBy(weaponKillsSniper ~ refrencedId + standing, data = teamData, FUN=sum)\nsniperUsageByMap$mapName <- unlist(lapply(sniperUsageByMap$refrencedId, \n                                          FUN = function(x){getMapName(destiny.manifest,x)}))\nsniperUsagePlot <- ggplot(data=sniperUsageByMap, \n                          aes(x=mapName, y=weaponKillsSniper.sum/killsPerMap$kills.sum, fill=factor(standing, labels=c('Winner', 'Loser')))) +\n  geom_bar(stat='identity', position='dodge') +\n  labs(x='Map Name', fill='Team', y=\"Number Of Sniper Kills / Total Kills\") +\n  ggtitle(\"Sniper Ratio by Map and Team\")+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\nplot(sniperUsagePlot)\n\n#hand cannon usage\nhandCannonUsage <- summaryBy(weaponKillsHandCannon ~refrencedId + standing, data = teamData, FUN=sum)\nhandCannonUsage$mapName <- unlist(lapply(handCannonUsage$refrencedId, \n                                          FUN = function(x){getMapName(destiny.manifest,x)}))\n\nprint(ggplot(data=handCannonUsage, \n             aes(x=mapName, y=weaponKillsHandCannon.sum / killsPerMap$kills.sum, fill=factor(standing,labels=c('Winners','Loosers'))))+\n        geom_bar(stat='identity', position = 'dodge') +\n        labs(x='Map Name', y = 'Hand Cannon Kills / Total Kills', fill='Standing') + \n        ggtitle('Victory Rate by Hand Cannon Usage')+\n        theme(axis.text.x = element_text(angle = 90, hjust = 1)))\n\npulseRifleUsage <- summaryBy(weaponKillsPulseRifle ~ refrencedId + standing, data = teamData, FUN=sum)\npulseRifleUsage$mapName <- unlist(lapply(pulseRifleUsage$refrencedId, \n                                         FUN = function(x){getMapName(destiny.manifest,x)}))\n\nprint(ggplot(data=pulseRifleUsage, \n             aes(x=mapName,\n                 y=weaponKillsPulseRifle.sum/killsPerMap$kills.sum, \n                 fill=factor(standing,labels=c('Winners','Losers'))))+\n        geom_bar(stat='identity', position='dodge') +\n        ggtitle('Victory Rate by Pulse Rifle Usage') +\n        labs(x='Map Name', y = 'Pulse Rifle Kills / Total Kills', fill='Standing') + \n        theme(axis.text.x = element_text(angle = 90, hjust = 1)))\n\n",
    "created" : 1432350255965.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2520806886",
    "id" : "51A7C813",
    "lastKnownWriteTime" : 1433609481,
    "path" : "~/CSCI183/DestinyBlogProject/R/teamDataAnalysis.R",
    "project_path" : "teamDataAnalysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}